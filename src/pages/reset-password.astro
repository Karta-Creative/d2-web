---
import Layout from "../layouts/Layout.astro";
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);
---

<Layout>
  <div class="max-w-4xl mx-auto p-8">
    <h1 class="text-4xl text-d2-teal font-bold mb-8">Reset Your Password</h1>
    
    <div class="bg-[rgba(67,222,194,0.1)] p-8 rounded-md">
      <p class="text-gray-400 mb-6">Enter your email address and we'll send you instructions to reset your password.</p>
      
      <div id="status" class="hidden"></div>
      
      <form id="resetForm" class="space-y-4">
        <div>
          <label for="email" class="block text-sm text-gray-400 mb-2">Email Address</label>
          <input
            type="email"
            id="email"
            class="w-full p-3 rounded bg-d2-gray-light border border-gray-700 text-gray-200 focus:border-d2-teal focus:outline-none"
            required
          />
        </div>
        <button 
          type="submit"
          class="bg-d2-teal text-d2-gray-dark px-8 py-2 rounded-md font-bold hover:bg-d2-teal/80 transition-colors"
        >
          Send Reset Instructions
        </button>
      </form>
    </div>
  </div>
</Layout>

<script>
  import { createClient } from '@supabase/supabase-js';
  
  const form = document.getElementById('resetForm');
  const statusDiv = document.getElementById('status');
  
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = (document.getElementById('email') as HTMLInputElement).value;
    
    try {
      const supabase = createClient(
        import.meta.env.PUBLIC_SUPABASE_URL,
        import.meta.env.PUBLIC_SUPABASE_ANON_KEY
      );
      
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/auth/callback`,
      });
      
      if (error) throw error;
      showStatus('Check your email for password reset instructions.', 'success');
    } catch (error: any) {
      showStatus(error.message || 'An error occurred', 'error');
    }
  });

  function showStatus(message: string, type: 'error' | 'success') {
    if (!statusDiv) return;
    statusDiv.textContent = message;
    statusDiv.className = `p-4 rounded ${type === 'error' ? 'bg-red-900/50 text-red-400' : 'bg-green-900/50 text-green-400'}`;
    statusDiv.classList.remove('hidden');
  }
</script>

<style>
  /* Additional styles specific to reset password */
  .container {
    width: 100%;
    max-width: 400px;
    margin: 0 auto;
    padding: 20px;
  }

  .logo {
    width: 80px;
    height: 80px;
    margin-bottom: 2rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
    width: 100%;
  }

  label {
    display: block;
    color: #999;
    margin-bottom: 0.5rem;
    font-size: 14px;
  }

  .message {
    margin: 1rem 0;
    padding: 1rem;
    border-radius: 4px;
    font-size: 14px;
    line-height: 1.4;
    text-align: center;
  }

  .message.error {
    background-color: rgba(255, 0, 0, 0.1);
    color: #ff6b6b;
  }

  .message.success {
    background-color: rgba(67, 222, 194, 0.1);
    color: #43dec2;
  }
</style>
