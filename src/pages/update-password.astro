---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="max-w-md mx-auto p-8">
    <img src="/images/logo.png" alt="D2 Logo" class="w-20 h-20 mx-auto mb-8" />
    
    <div class="space-y-6">
      <h1 class="text-2xl text-d2-teal font-bold text-center">Set New Password</h1>
      <p class="text-gray-400 text-center">Please enter your new password below.</p>
      
      <div id="status" class="hidden"></div>
      
      <form id="updateForm" class="space-y-4">
        <div>
          <label for="password" class="block text-sm text-gray-400 mb-2">New Password</label>
          <div class="relative">
            <input
              type="password"
              id="password"
              class="w-full p-3 rounded bg-d2-gray-light border border-gray-700 text-gray-200 focus:border-d2-teal focus:outline-none pr-12"
              required
              minlength="8"
            />
            <button
              type="button"
              id="togglePassword"
              class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-300"
            >
              <span class="sr-only">Toggle password visibility</span>
              <!-- Eye icon (shown when password is hidden) -->
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 eye-open">
                <path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z" />
                <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <!-- Eye-slash icon (shown when password is visible) -->
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 eye-closed hidden">
                <path stroke-linecap="round" stroke-linejoin="round" d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.242 4.242L9.88 9.88" />
              </svg>
            </button>
          </div>
          <div class="mt-2 space-y-1 text-sm">
            <div id="lengthHint" class="text-gray-400">At least 8 characters</div>
            <div id="uppercaseHint" class="text-gray-400">One uppercase letter</div>
            <div id="lowercaseHint" class="text-gray-400">One lowercase letter</div>
            <div id="numberHint" class="text-gray-400">One number</div>
            <div id="symbolHint" class="text-gray-400">One symbol</div>
          </div>
        </div>
        <button 
          type="submit"
          class="w-full bg-d2-teal text-d2-gray-dark py-3 rounded font-bold hover:bg-d2-teal/80 transition-colors"
        >
          Update Password
        </button>
      </form>
    </div>
  </div>
</Layout>

<script>
  import { createClient } from '@supabase/supabase-js';

  const supabase = createClient(
    import.meta.env.PUBLIC_SUPABASE_URL,
    import.meta.env.PUBLIC_SUPABASE_ANON_KEY
  );

  const form = document.getElementById('updateForm');
  const statusDiv = document.getElementById('status');
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const toggleButton = document.getElementById('togglePassword');
  const eyeOpen = document.querySelector('.eye-open');
  const eyeClosed = document.querySelector('.eye-closed');

  // Password visibility toggle
  toggleButton?.addEventListener('click', () => {
    const type = passwordInput.type === 'password' ? 'text' : 'password';
    passwordInput.type = type;
    eyeOpen?.classList.toggle('hidden');
    eyeClosed?.classList.toggle('hidden');
  });

  // Password validation
  const validatePassword = (password: string) => {
    const hints = {
      length: { el: document.getElementById('lengthHint'), test: (p: string) => p.length >= 8 },
      uppercase: { el: document.getElementById('uppercaseHint'), test: (p: string) => /[A-Z]/.test(p) },
      lowercase: { el: document.getElementById('lowercaseHint'), test: (p: string) => /[a-z]/.test(p) },
      number: { el: document.getElementById('numberHint'), test: (p: string) => /[0-9]/.test(p) },
      symbol: { el: document.getElementById('symbolHint'), test: (p: string) => /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>?/`~]/.test(p) }
    };

    Object.values(hints).forEach(({ el, test }) => {
      if (el) {
        el.className = test(password) ? 'text-green-400' : 'text-gray-400';
      }
    });

    return Object.values(hints).every(({ test }) => test(password));
  };

  passwordInput?.addEventListener('input', (e) => {
    const password = (e.target as HTMLInputElement).value;
    validatePassword(password);
  });

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const password = passwordInput.value;
    
    if (!validatePassword(password)) {
      showStatus('Please meet all password requirements', 'error');
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({ password });
      if (error) throw error;
      
      showStatus('Password updated successfully! Redirecting...', 'success');
      setTimeout(() => window.location.href = '/', 2000);
    } catch (error: any) {
      showStatus(error.message || 'An error occurred', 'error');
    }
  });

  function showStatus(message: string, type: 'error' | 'success') {
    if (!statusDiv) return;
    statusDiv.textContent = message;
    statusDiv.className = `p-4 rounded ${type === 'error' ? 'bg-red-900/50 text-red-400' : 'bg-green-900/50 text-green-400'}`;
    statusDiv.classList.remove('hidden');
  }
</script> 